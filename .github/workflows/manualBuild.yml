name: Build specific commit TDLib
on:
  workflow_dispatch:
      inputs:
        tdSha:
          description: 'Enter tdlib sha.'
          required: true

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      sha_short: ${{ steps.vars.outputs.sha_short }}
      td_version: ${{ steps.ver.outputs.td_version }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:

      - name: Get latest release
        id: latest_release
        uses: cardinalby/git-get-release-action@1.2.4
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          repo: pcpl2/tdLibBinaresForFlutterDesktop
          latest: true
          prerelease: false
          draft: false

      - name: Get last tdlibBuild hash
        id: get_lastest_hash
        run: |
          echo "${{ steps.latest_release.outputs.id }}"
          echo "${{ steps.latest_release.outputs.name }}"
          echo "${{ steps.latest_release.outputs.body }}" | grep "TDLib SHA" | awk '{ print $3 }'
          echo "lastTdHash=$(echo "${{ steps.latest_release.outputs.body }}" | grep "TDLib SHA" | awk '{ print $3 }' | sed -E '$ s/\n+$//')" >> $GITHUB_OUTPUT
      - name: Checkout tdLib repo
        uses: actions/checkout@v4.0.0
        with:
          ref: ${{ github.event.inputs.tdSha }}
          repository: tdlib/td
          path: td
      
      - name: Set outputs
        id: vars
        run: |
          cd td
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "td_commit_date=$(git show -s --date=format:'%d-%m-%Y %H:%M' --format=%cd)" >> $GITHUB_OUTPUT
          echo "date=$(date +'%d-%m-%Y %H:%M')" >> $GITHUB_OUTPUT
        
      - name: Get version
        id: ver
        run: |
          cd td
          echo "line of file: $(grep -in 'project(TDLib' CMakeLists.txt)"
          echo "version: $(grep -in 'project(TDLib' CMakeLists.txt| egrep -o '([0-9]{1,}\.)+[0-9]{1,}')"
          echo "td_version=$(grep -in 'project(TDLib' CMakeLists.txt| egrep -o '([0-9]{1,}\.)+[0-9]{1,}')" >> $GITHUB_OUTPUT
        
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          body: |
              TDLib commit date: ${{ steps.vars.outputs.td_commit_date }}
              TDLib SHA: ${{ github.event.inputs.tdSha }}
              Build date: ${{ steps.vars.outputs.date }}
              https://github.com/tdlib/td/compare/${{ steps.get_lastest_hash.outputs.lastTdHash }}...${{ github.event.inputs.tdSha }}
          name: '${{ steps.ver.outputs.td_version }}'
          tag_name: '${{ steps.ver.outputs.td_version }}'
          draft: true
          prerelease: false

      - name: Print url upload 
        run: echo "${{ steps.create_release.outputs.upload_url }}"

      - name: Print release id
        run: echo "${{ steps.create_release.outputs.id }}"
    
  BuildLinux:
    needs: create_release
    name: Build Linux
    uses: pcpl2/tdLibBinaresForFlutterDesktop/.github/workflows/BuildOnLinux.yml@main
    with:
      tdSha: ${{ github.event.inputs.tdSha }}
    secrets:
      uploadUrl: ${{ needs.create_release.outputs.upload_url }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  BuildmacOS:
    needs: create_release
    name: Build macOS
    uses: pcpl2/tdLibBinaresForFlutterDesktop/.github/workflows/BuildOnMac.yml@main
    with:
      tdSha: ${{ github.event.inputs.tdSha }}
      tdVersion: ${{ needs.create_release.outputs.td_version }}
    secrets:
      uploadUrl: ${{ needs.create_release.outputs.upload_url }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  BuildWindows:
    needs: create_release
    name: Build Windows
    uses: pcpl2/tdLibBinaresForFlutterDesktop/.github/workflows/BuildOnWindows.yml@main
    with:
      tdSha: ${{ github.event.inputs.tdSha }}
    secrets:
      uploadUrl: ${{ needs.create_release.outputs.upload_url }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          
#
#  publish_release:
#    name: Publish release
#    runs-on: ubuntu-latest
#    needs: [create_release, linux_20_04, linux_22_04, windows, macos_10_15, macos_11]
#    steps:
#    - uses: eregon/publish-release@v1.0.4
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        release_id: ${{ needs.create_release.outputs.release_id }}
#