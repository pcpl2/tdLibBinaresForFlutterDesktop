name: ðŸ“¦ Make Windows release

on: 
  workflow_call:
    inputs:
      tdSha:
        required: false
        type: string
    secrets:
      uploadUrl:
        required: true
      GH_TOKEN:
        required: true

jobs:
  macOS-Build:
    name: Build on Windows ${{ matrix.osVersion }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: windows-2022
          osVersion: 2022
        - os: windows-2019
          osVersion: 2019

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout tdLib repo
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ inputs.tdSha }}
          repository: tdlib/td

      - name: Cache vcpkg
        uses: actions/cache@v4.0.0
        id: cache
        with:
          path: vcpkg
          key: vcpkg-windows-${{ matrix.os }}
          restore-keys: vcpkg-windows-${{ matrix.os }}

      - name: Checkout vcpkg repo
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4.1.1
        with:
          ref: cd5e746ec203c8c3c61647e0886a8df8c1e78e41
          repository: Microsoft/vcpkg
          path: vcpkg

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
         cd vcpkg
         ./bootstrap-vcpkg.bat -disableMetrics
         ./vcpkg.exe install gperf:x64-windows openssl:x64-windows zlib:x64-windows readline:x64-windows
      
      - name: Disable Test, Benchmark and other not used projects build
        shell: pwsh
        run: |
          (Get-Content CMakeLists.txt) | ForEach-Object { $_ -replace 'add_subdirectory\(test\)', '# add_subdirectory(test)' } | ForEach-Object { $_ -replace 'add_subdirectory\(benchmark\)', '# add_subdirectory(benchmark)' } | Set-Content CMakeLists.txt
          (Get-Content CMakeLists.txt) | ForEach-Object { $_ -replace 'add_executable\(tg_cli td/telegram/cli.cpp \$\{TL_TD_JSON_SOURCE\}\)', '# add_executable(tg_cli td/telegram/cli.cpp ${TL_TD_JSON_SOURCE})' } | ForEach-Object { $_ -replace 'target_link_libraries\(tg_cli PRIVATE memprof tdclient tdcore\)', '# target_link_libraries(tg_cli PRIVATE memprof tdclient tdcore)' } | ForEach-Object { $_ -replace 'add_dependencies\(tg_cli tl_generate_json\)', '# add_dependencies(tg_cli tl_generate_json)' } | Set-Content CMakeLists.txt
          (Get-Content ./tdactor/CMakeLists.txt) | ForEach-Object { $_ -replace 'add_executable\(example example/example.cpp\)', '# add_executable(example example/example.cpp)' } | ForEach-Object { $_ -replace 'target_link_libraries\(example PRIVATE tdactor\)', '# target_link_libraries(example PRIVATE tdactor)' } | Set-Content ./tdactor/CMakeLists.txt
          (Get-Content ./tddb/CMakeLists.txt) | ForEach-Object { $_ -replace 'add_executable\(binlog_dump td/db/binlog/binlog_dump.cpp\)', '# add_executable(binlog_dump td/db/binlog/binlog_dump.cpp)' } | ForEach-Object { $_ -replace 'target_link_libraries\(binlog_dump PRIVATE tddb\)', '# target_link_libraries(binlog_dump PRIVATE tddb)' } | Set-Content ./tddb/CMakeLists.txt

      - name: Configure
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake -A x64 -DCMAKE_INSTALL_PREFIX:PATH=../tdlib -DTD_ENABLE_MULTI_PROCESSOR_COMPILATION=ON -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..

      - name: Build
        shell: cmd
        working-directory: ./build
        run: |
          cmake --build . --target install --config Release --parallel 1

      - name: Copy files
        run: |
          mkdir binaryR
          copy td\generate\scheme\td_api.tl binaryR
          copy tdlib\bin\libcrypto-3-x64.dll binaryR
          copy tdlib\bin\libssl-3-x64.dll binaryR
          copy tdlib\bin\tdjson.dll binaryR
          copy tdlib\bin\zlib1.dll binaryR

      - name: Upload artifact
        uses: actions/upload-artifact@v4.3.0
        with:
          retention-days: 5
          name: TDLib-x64-Windows-${{ matrix.osVersion }}
          path: binaryR

      - name: Make zip file
        shell: cmd
        run: |
          cd binaryR
          7z a ../TDLib-x64-Windows-${{ matrix.osVersion }}.zip *

      - name: Upload release assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ secrets.uploadUrl }}
          asset_name: TDLib-x64-Windows-${{ matrix.osVersion }}.zip
          asset_path: ${{ github.workspace }}/TDLib-x64-Windows-${{ matrix.osVersion }}.zip
          asset_content_type: application/octet-stream
