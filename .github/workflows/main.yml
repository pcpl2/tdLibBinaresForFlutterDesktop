name: Auto build TDLib
on:
  workflow_dispatch:
  schedule:
    - cron: "0 10 * * *" # every day at 1 pm

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      sha_short: ${{ steps.vars.outputs.sha_short }}
      td_version: ${{ steps.vars.outputs.td_version }}
      td_sha: ${{ steps.update.outputs.updateHash }}
      td_old_sha: ${{ steps.get_lastest_hash.outputs.lastTdHash }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Getting latest binares version
        id: tdPebuilt
        uses: pozetroninc/github-action-get-latest-release@v0.6.0
        with:
          repository: pcpl2/tdLibBinaresForFlutterDesktop
          excludes: prerelease, draft

      - name: Get latest release
        id: latest_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          repo: pcpl2/tdLibBinaresForFlutterDesktop
          latest: true
          prerelease: false
          draft: false

      - name: Get last tdlibBuild hash
        id: get_lastest_hash
        run: |
           echo "${{ steps.latest_release.outputs.id }}"
           echo "${{ steps.latest_release.outputs.name }}"
           echo "${{ steps.latest_release.outputs.body }}" | grep "TDLib SHA" | awk '{ print $3 }'
           echo "lastTdHash=$(echo "${{ steps.latest_release.outputs.body }}" | grep "TDLib SHA" | awk '{ print $3 }' | sed -E '$ s/\n+$//')" >> $GITHUB_OUTPUT
           
      - name: Checkout tdLib repo
        uses: actions/checkout@v3.1.0
        with:
          repository: tdlib/td
          path: td
          fetch-depth: 0

      - name: Get tdlib updates
        id: update
        run: |
          cd td
          echo "version: $(grep -in 'project(TDLib' CMakeLists.txt| egrep -o '([0-9]{1,}\.)+[0-9]{1,}')"
          echo $(git log --pretty=oneline ${{ steps.get_lastest_hash.outputs.lastTdHash }}..HEAD | awk '!/^$/' | grep "Update version to" | awk 'END{ print $1 }')
          echo "updateHash=$(git log --pretty=oneline ${{ steps.get_lastest_hash.outputs.lastTdHash }}..HEAD | awk '!/^$/' | grep "Update version to" | awk 'END{ print $1 }')" >> $GITHUB_OUTPUT

      - if: steps.update.outputs.updateHash == ''
        name: Cancelling => Not found newer version
        uses: andymckay/cancel-action@0.3

      - name: Checkout and get version
        if: steps.update.outputs.updateHash != ''
        id: vars
        run: |
           cd td 
           git checkout ${{ steps.update.outputs.updateHash }}
           echo "td_version=$(grep -in 'project(TDLib' CMakeLists.txt| egrep -o '([0-9]{1,}\.)+[0-9]{1,}')" >> $GITHUB_OUTPUT
           echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
           echo "td_commit_date=$(git show -s --date=format:'%d-%m-%Y %H:%M' --format=%cd)" >> $GITHUB_OUTPUT
           echo "date=$(date +'%d-%m-%Y %H:%M')" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        if: steps.update.outputs.updateHash != ''
        uses: softprops/action-gh-release@v1
        with:
          body: |
              TDLib commit date: ${{ steps.vars.outputs.td_commit_date }}
              TDLib SHA: ${{ steps.update.outputs.updateHash }}
              Build date: ${{ steps.vars.outputs.date }}
              Changelog commits: https://github.com/tdlib/td/compare/${{ steps.get_lastest_hash.outputs.lastTdHash }}...${{ steps.update.outputs.updateHash }}
          name: '${{ steps.ver.outputs.td_version }}'
          tag_name: '${{ steps.ver.outputs.td_version }}'
          draft: true
          prerelease: false
          
  BuildLinux:
    needs: create_release
    name: Build Linux
    uses: pcpl2/tdLibBinaresForFlutterDesktop/.github/workflows/BuildOnLinux.yml@main
    with:
      tdSha: ${{ needs.create_release.outputs.td_sha }}
    secrets:
      uploadUrl: ${{ needs.create_release.outputs.upload_url }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     
  BuildmacOS:
    needs: create_release
    name: Build macOS
    uses: pcpl2/tdLibBinaresForFlutterDesktop/.github/workflows/BuildOnMac.yml@main
    with:
      tdSha: ${{ needs.create_release.outputs.td_sha }}
      tdVersion: ${{ needs.create_release.outputs.td_version }}
    secrets:
      uploadUrl: ${{ needs.create_release.outputs.upload_url }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  BuildWindows:
    needs: create_release
    name: Build Windows
    uses: pcpl2/tdLibBinaresForFlutterDesktop/.github/workflows/BuildOnWindows.yml@main
    with:
      tdSha: ${{ needs.create_release.outputs.td_sha }}
    secrets:
      uploadUrl: ${{ needs.create_release.outputs.upload_url }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_release:
    name: Publish release
    runs-on: ubuntu-latest
    needs: [create_release, BuildLinux, BuildWindows, BuildmacOS]
    steps:
    - uses: eregon/publish-release@v1.0.5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ needs.create_release.outputs.release_id }}
